Name:                shaped-types
Version:             0.0.0
Cabal-Version:       >= 1.6
Synopsis:            Statically shaped types
Category:            data
Description:
  Experimenting with statically shaped types, GHC specialization, and reification
Author:              Conal Elliott
Maintainer:          conal@conal.net
Copyright:           (c) 2016 by Conal Elliott
License:             BSD3
License-File:        COPYING
Stability:           experimental
build-type:          Simple

source-repository head
  type:     git
  location: git://github.com/conal/shaped-types.git

Library
  hs-Source-Dirs:      src
  Extensions:
  Build-Depends:       base<5
                     , ghc-prim
                     , QuickCheck >= 2.7.3
                     , keys
                     , TypeCompose
                     , circat

                     , reification-rules

-- TODO: can I drop ghc-prim and still compile with the reification plugin?

  Exposed-Modules:     
                       ShapedTypes.Misc
                       ShapedTypes.Sized

                       ShapedTypes.Nat
                       ShapedTypes.Pair
                       ShapedTypes.Vec
                       ShapedTypes.RPow
                       ShapedTypes.LPow
                       ShapedTypes.Linear
                       ShapedTypes.Scan
                       ShapedTypes.FFT

--                        ShapedTypes.ApproxEq
--                        ShapedTypes.Complex

--                        ShapedTypes.Interactive
--                        ShapedTypes.Plugin

  ghc-options:         -Wall

--                        -fplugin=ReificationRules.Plugin
--                        -dcore-lint -fexpose-all-unfoldings

                       -fplugin-opt=ReificationRules.Plugin:trace


--                        -ddump-rule-rewrites

--                        -ddump-inlinings

--                        -ddump-rules

                       -dsuppress-idinfo
                       -dsuppress-module-prefixes


-- TODO: Add a flag for whether to compile with reification.
